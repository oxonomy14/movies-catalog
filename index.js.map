{"version":3,"file":"index.js","sources":["../src/js/refs.js","../src/js/render-functions.js","../src/js/moviesdb-api.js","../src/main.js"],"sourcesContent":["export const refs = {\n  lastMovieList: document.querySelector('.last-movie-list'),\n  sectionMovieAbout: document.querySelector('.section-movie-about'),\n  boxAboutMovie: document.querySelector('.about-movie'),\n  categoryMovieList: document.querySelector('.category-movie-list'),\n  topMovieList: document.querySelector('.top-movie-list'),\n  form: document.querySelector('#search-form'),\n  searchTxtLoaderMore: document.querySelector('.search-btn-loader-box-txt'),\n  searchBtnLoadMore: document.querySelector('.search-btn-loadmore'),\n  searchMovieList: document.querySelector('.search-movie-list'),\n};\n","import { refs } from './refs';\nimport SimpleLightbox from 'simplelightbox';\n// Додатковий імпорт стилів\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nexport function renderQueryList(queryMovies) {\n  const markup = queryMovies\n    .map(movie => {\n      const genres = movie.genres ? movie.genres.join(', ') : 'Undefined'; // Перевіряємо, чи є жанри\n      return `<li class=\"search-movie-item\" id=\"${movie.id}\">\n              <div class=\"search-movie-box\">\n            \n                <img\n                  class=\"search-movie-small-img\"\n                  src=\"${movie.medium_cover_image}\"\n                  alt=\"${movie.title_english}\"\n                  title=\"${movie.title_english}\"\n                />\n                <div class =\"search-movie-small-img-rt\"> <p class=\"search-movie-descr-txt\">IMDb: ${movie.rating}</p></div>\n                \n                <div class=\"search-movie-descr\">\n                  <ul class=\"search-movie-descr-list\">\n                    <li class=\"search-movie-descr-item\">\n                      <h3 class=\"search-movie-descr-subtitle\">${movie.title_long}</h3>\n                      <p class=\"search-movie-descr-txt\">${genres}</p>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </li>`;\n    })\n    .join('');\n\n  refs.searchMovieList.insertAdjacentHTML('beforeend', markup);\n}\n\nexport function renderMovieList(movies) {\n  const markup = movies\n    .map(movie => {\n      const genres = movie.genres ? movie.genres.join(', ') : 'Undefined'; // Перевіряємо, чи є жанри\n      return `<li class=\"last-movie-item\" id=\"${movie.id}\">\n              <div class=\"last-movie-box\">\n            \n                <img\n                  class=\"last-movie-small-img\"\n                  src=\"${movie.medium_cover_image}\"\n                  alt=\"${movie.title_english}\"\n                  title=\"${movie.title_english}\"\n                />\n                <div class =\"last-movie-small-img-rt\"> <p class=\"last-movie-descr-txt\">IMDb: ${movie.rating}</p></div>\n                \n                <div class=\"last-movie-descr\">\n                  <ul class=\"last-movie-descr-list\">\n                    <li class=\"last-movie-descr-item\">\n                      <h3 class=\"last-movie-descr-subtitle\">${movie.title_long}</h3>\n                      <p class=\"last-movie-descr-txt\">${genres}</p>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </li>`;\n    })\n    .join('');\n\n  refs.lastMovieList.insertAdjacentHTML('beforeend', markup);\n}\n\nexport function renderMovieAbout(showMovie) {\n  refs.sectionMovieAbout.style.display = 'block';\n  const genres = showMovie.genres ? showMovie.genres.join(', ') : 'Undefined'; // Перевіряємо, чи є жанри\n  console.log('Жанр:', genres);\n\n  // Перевіряємо, чи є актори\n  const actors = showMovie.cast;\n\n  // Формуємо список акторів\n  const actorList = actors.length\n    ? actors\n        .map(actor => `${actor.name} as <u>${actor.character_name}</u>`)\n        .join(', ')\n    : 'No actors available';\n\n  // Формуємо зображення акторів\n\n  const actorImages = actors.length\n    ? actors\n        .map(\n          actor =>\n            `<img src=\"${actor.url_small_image}\" alt=\"${actor.name}\" title=\"${actor.name}\" class=\"actor-img\">`\n        )\n        .join('')\n    : 'No actor images available';\n\n  const markup = `\n      <div class=\"about-movie-title-box\">\n        <div>\n          <h2 class=\"about-movie-main-title\">${showMovie.title_english}</h2>\n        </div>\n        <div class=\"about-movie-title-line\"></div>\n      </div>\n      <div class=\"about-movie-container\">\n        <div class=\"about-movie-img\">\n          <img src=\"${showMovie.large_cover_image}\" alt=\"${\n    showMovie.title_english\n  }\" title=\"${showMovie.title_english}\" />\n          <div class=\"actor-img-list\">\n           ${actorImages}\n          </div>\n        </div>\n        <div class=\"about-movie-box\">\n          <div class=\"about-movie-item\">\n            <h3 class=\"about-movie-title\">${showMovie.title_long}</h3>\n              <p class=\"about-movie-txt\"><span>Genres: </span>${genres}</p>\n            <p class=\"about-movie-txt\"><span>IMDb rating: </span>${\n              showMovie.rating\n            }</p>\n            <p class=\"about-movie-txt\"><span>Year: </span>${showMovie.year}</p>\n            <p class=\"about-movie-txt\">\n              <span>Actors: </span>${actorList}\n            </p>\n            <div class=\"screen-img\">\n              <ul class=\"screen-img-list\">\n                <li class=\"screen-img-item\">\n                <a href=\"${showMovie.large_screenshot_image1}\">\n\n                  <img src=\"${showMovie.medium_screenshot_image1}\" alt=\"${\n    showMovie.title_english\n  }\" title=\"${showMovie.title_english}\"/></a>\n                </li>\n                  <li class=\"screen-img-item\">\n                     <a href=\"${showMovie.large_screenshot_image2}\">\n                  <img src=\"${showMovie.medium_screenshot_image2}\" alt=\"${\n    showMovie.title_english\n  }\" title=\"${showMovie.title_english}\" /></a>\n                </li>\n                  <li class=\"screen-img-item\">\n                     <a href=\"${showMovie.large_screenshot_image3}\">\n                  <img src=\"${showMovie.medium_screenshot_image3}\" alt=\"${\n    showMovie.title_english\n  }\" title=\"${showMovie.title_english}\" /></a>\n                </li>\n             \n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p class=\"about-movie-descr\">\n        <span>Description: </span>${\n          showMovie.description_full || 'Sorry! Movie description not added yet'\n        }       \n      </p>`;\n\n  refs.boxAboutMovie.innerHTML = markup;\n\n  // Ініціалізація бібліотеки SimpleLightbox\n  let galleryBox = new SimpleLightbox('.screen-img-list a', {\n    captionsData: 'alt', // Витягує підписи із атрибута alt\n    captionDelay: 250, // Затримка появи підпису (в мс)\n  });\n\n  // Оновлення SimpleLightbox, для перезавантаження списку елементів\n  galleryBox.refresh();\n}\n\nexport function renderCategoryMovie(categoryMovies) {\n  const markup = categoryMovies\n    .map(movie => {\n      const genres = movie.genres ? movie.genres.join(', ') : 'Undefined'; // Перевіряємо, чи є жанри\n      return `<li class=\"category-movie-item\" id=\"${movie.id}\">\n              <div class=\"category-movie-box\">\n            \n                <img\n                  class=\"category-movie-small-img\"\n                  src=\"${movie.medium_cover_image}\"\n                  alt=\"${movie.title_english}\"\n                  title=\"${movie.title_english}\"\n                />\n                <div class =\"category-movie-small-img-rt\"> <p class=\"category-movie-descr-txt\">IMDb: ${movie.rating}</p></div>\n                \n                <div class=\"category-movie-descr\">\n                  <ul class=\"category-movie-descr-list\">\n                    <li class=\"category-movie-descr-item\">\n                      <h3 class=\"category-movie-descr-subtitle\">${movie.title_long}</h3>\n                      <p class=\"category-movie-descr-txt\">${genres}</p>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </li>`;\n    })\n    .join('');\n\n  refs.categoryMovieList.insertAdjacentHTML('beforeend', markup);\n}\n\nexport function renderTopMovie(topMovies) {\n  const markup = topMovies\n    .map(movie => {\n      const genres = movie.genres ? movie.genres.join(', ') : 'Undefined'; // Перевіряємо, чи є жанри\n      return `<li class=\"top-movie-item\" id=\"${movie.id}\">\n              <div class=\"top-movie-box\">\n            \n                <img\n                  class=\"top-movie-small-img\"\n                  src=\"${movie.medium_cover_image}\"\n                  alt=\"${movie.title_english}\"\n                  title=\"${movie.title_english}\"\n                />\n                <div class =\"top-movie-small-img-rt\"> <p class=\"top-movie-descr-txt\">IMDb: ${movie.rating}</p></div>\n                \n                <div class=\"top-movie-descr\">\n                  <ul class=\"top-movie-descr-list\">\n                    <li class=\"top-movie-descr-item\">\n                      <h3 class=\"top-movie-descr-subtitle\">${movie.title_long}</h3>\n                      <p class=\"top-movie-descr-txt\">${genres}</p>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </li>`;\n    })\n    .join('');\n\n  refs.topMovieList.insertAdjacentHTML('beforeend', markup);\n}\n","//import { refs } from './refs';\nimport {\n  renderMovieList,\n  renderCategoryMovie,\n  renderTopMovie,\n  renderMovieAbout,\n} from './render-functions';\nimport axios from 'axios';\n\nexport async function querySearchMovies(query, limit, page) {\n  const BASE_URL =\n    'https://movie-database-api1.p.rapidapi.com/list_movies.json';\n  const END_POINT = '';\n\n  const params = new URLSearchParams({\n    limit: limit,\n    page: page,\n    quality: 'all',\n    genre: 'all',\n    minimum_rating: '0',\n    query_term: query,\n    sort_by: 'year',\n    order_by: 'desc',\n  });\n\n  const url = `${BASE_URL}${END_POINT}?${params}`;\n\n  const headers = {\n    'x-rapidapi-key': '0eebb25122mshd6b10152edde993p1dd392jsn360216e9620b',\n    'x-rapidapi-host': 'movie-database-api1.p.rapidapi.com',\n  };\n\n  try {\n    const resQuery = await axios.get(url, { headers });\n\n    const queryMovies = resQuery.data.data.movies; // Повертаємо отримані\n    const totalMovies = resQuery.data.data.movie_count;\n\n    return { queryMovies, totalMovies };\n  } catch (error) {\n    console.error('Помилка отримання даних:', error);\n  }\n}\n\nexport async function showLastMovies() {\n  const BASE_URL =\n    'https://movie-database-api1.p.rapidapi.com/list_movies.json';\n  const END_POINT = '';\n\n  const params = new URLSearchParams({\n    limit: '20',\n    page: '1',\n    quality: 'all',\n    genre: 'all',\n    minimum_rating: '0',\n    query_term: '0',\n    sort_by: 'year',\n    order_by: 'desc',\n  });\n\n  const url = `${BASE_URL}${END_POINT}?${params}`;\n\n  const headers = {\n    'x-rapidapi-key': '0eebb25122mshd6b10152edde993p1dd392jsn360216e9620b',\n    'x-rapidapi-host': 'movie-database-api1.p.rapidapi.com',\n  };\n\n  try {\n    const response = await axios.get(url, { headers });\n\n    const movies = response.data.data.movies; // Повертаємо отримані\n    console.log(movies); // Виведе повні дані у консоль\n\n    renderMovieList(movies);\n\n    // return movies;\n  } catch (error) {\n    console.error('Помилка отримання даних:', error);\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  // Тут можна написати логіку отримання деталей фільму за id\n  console.log(`Завантажуємо деталі для фільму з id: ${movieId}`);\n\n  const BASE_URL =\n    'https://movie-database-api1.p.rapidapi.com/movie_details.json';\n  const END_POINT = '';\n\n  const params = new URLSearchParams({\n    movie_id: movieId,\n    with_images: 'true',\n    with_cast: 'true',\n  });\n\n  const url = `${BASE_URL}${END_POINT}?${params}`;\n\n  const headers = {\n    'x-rapidapi-key': '0eebb25122mshd6b10152edde993p1dd392jsn360216e9620b',\n    'x-rapidapi-host': 'movie-database-api1.p.rapidapi.com',\n  };\n\n  try {\n    const res = await axios.get(url, { headers });\n\n    const showMovie = res.data.data.movie; // Повертаємо отримані\n    console.log('показуємо опис фільму', showMovie); // Виведе повні дані у консоль\n\n    renderMovieAbout(showMovie);\n  } catch (error) {\n    console.error('Помилка отримання даних:', error);\n  }\n}\n\nexport async function showCategoryMovies() {\n  const BASE_URL =\n    'https://movie-database-api1.p.rapidapi.com/list_movies.json';\n  const END_POINT = '';\n\n  const params = new URLSearchParams({\n    limit: '5',\n    page: '1',\n    quality: 'all',\n    genre: 'Comedy',\n    minimum_rating: '0',\n    query_term: '0',\n    sort_by: 'date_added',\n    order_by: 'desc',\n  });\n\n  const url = `${BASE_URL}${END_POINT}?${params}`;\n\n  const headers = {\n    'x-rapidapi-key': '0eebb25122mshd6b10152edde993p1dd392jsn360216e9620b',\n    'x-rapidapi-host': 'movie-database-api1.p.rapidapi.com',\n  };\n\n  try {\n    const resCategory = await axios.get(url, { headers });\n\n    const categoryMovies = resCategory.data.data.movies; // Повертаємо отримані\n    console.log(categoryMovies); // Виведе повні дані у консоль\n\n    renderCategoryMovie(categoryMovies);\n  } catch (error) {\n    console.error('Помилка отримання даних:', error);\n  }\n}\n\nexport async function showTopMovies() {\n  const BASE_URL =\n    'https://movie-database-api1.p.rapidapi.com/list_movies.json';\n  const END_POINT = '';\n\n  const params = new URLSearchParams({\n    limit: '5',\n    page: '1',\n    quality: 'all',\n    genre: 'all',\n    minimum_rating: '8',\n    query_term: '0',\n    sort_by: 'year',\n    order_by: 'desc',\n  });\n\n  const url = `${BASE_URL}${END_POINT}?${params}`;\n\n  const headers = {\n    'x-rapidapi-key': '0eebb25122mshd6b10152edde993p1dd392jsn360216e9620b',\n    'x-rapidapi-host': 'movie-database-api1.p.rapidapi.com',\n  };\n\n  try {\n    const resTop = await axios.get(url, { headers });\n\n    const topMovies = resTop.data.data.movies; // Повертаємо отримані\n    console.log(topMovies); // Виведе повні дані у консоль\n\n    renderTopMovie(topMovies);\n  } catch (error) {\n    console.error('Помилка отримання даних:', error);\n  }\n}\n","import {\n  querySearchMovies,\n  showLastMovies,\n  showCategoryMovies,\n  showTopMovies,\n  fetchMovieDetails,\n} from './js/moviesdb-api';\nimport { renderQueryList } from './js/render-functions';\nimport { refs } from './js/refs';\n\nimport iziToast from 'izitoast';\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\n\nshowLastMovies();\nshowCategoryMovies();\nshowTopMovies();\n\nrefs.lastMovieList.addEventListener('click', onMovieClick);\nrefs.form.addEventListener('submit', onFormSubmit);\n\nrefs.searchTxtLoaderMore.style.display = 'none'; // Ховаємо індикатор завантаження\nrefs.searchBtnLoadMore.style.display = 'none'; // Ховаємо кнопку перед пошуком\n\nlet query = ''; // Змінна для збереження пошукового запиту\nlet page = 1; // Починаємо з першої сторінки\nconst limit = 10; // Кількість зображень на сторінку\nlet totalMovies = 'null'; // Загальна кількість сторінок (буде оновлюватися після запиту)\n\nasync function onFormSubmit(evt) {\n  evt.preventDefault();\n\n  refs.searchMovieList.innerHTML = ''; // Перед пошуком за новим ключовим словом повністю очищаємо попередній вміст галереї\n  page = 1; // Скидаємо номер сторінки\n  let totalPages = 0; // ⚠️ Обнуляємо загальну кількість сторінок!\n\n  refs.searchBtnLoadMore.style.display = 'none'; // ⚠️ Явно ховаємо кнопку перед запитом\n\n  query = evt.currentTarget.elements.query.value.trim();\n\n  if (!query) {\n    iziToast.error({\n      title: 'Помилка',\n      message: `❌ Введіть в поле пошуку пошукову фразу`,\n      position: 'topCenter',\n      timeout: 2500,\n    });\n\n    return;\n  } else {\n    refs.searchBtnLoadMoreтзь.style.display = 'none'; // Ховаємо кнопку перед новим пошуком\n    refs.searchTxtLoaderMore.style.display = 'block'; // Показуємо індикатор завантаження\n    try {\n      const { totalMovies, queryMovies } = await querySearchMovies(\n        query,\n        limit,\n        page\n      );\n\n      if (!totalMovies) return; // Якщо запит не повернув даних, виходимо\n      renderQueryList(queryMovies); // Відмальовуємо знайдені зображення\n\n      totalPages = Math.ceil(totalMovies / limit); // Оновлюємо загальну кількість сторінок\n      console.log(`Всього сторінок: ${totalPages}`);\n\n      if (totalPages > 1) {\n        refs.searchBtnLoaderBox.style.display = 'block'; // Показуємо кнопку, якщо є більше однієї сторінки\n      } else {\n        iziToast.info({\n          title: 'Увага',\n          message: `🔹 Ви досягли кінця результатів пошуку`,\n          position: 'topCenter',\n          timeout: 5000,\n        });\n      }\n    } catch (error) {\n      iziToast.error({\n        title: 'Помилка',\n        message: `❌ Щось зламалося. Треба звернутись до адміністратора сайту! Або спробуйте ще раз пізніше!`,\n        position: 'topCenter',\n        timeout: 5000,\n      });\n    } finally {\n      refs.searchTxtLoaderMore.style.display = 'none'; // Сховати індикатор завантаження\n    }\n  }\n  refs.form.reset();\n}\n\n// ---- Завантаження наступної сторінки ---- //\nasync function onSearchBtnLoadMore() {\n  page += 1; // Збільшуємо сторінку\n\n  refs.searchBtnLoaderBox.style.display = 'none';\n  refs.searchTxtLoaderMore.style.display = 'block';\n\n  try {\n    const { totalImages, images } = await queryPixabay(query, page, perPage);\n    if (!totalImages) return; // Якщо запит не повернув даних, виходимо\n    renderSearchImages(images); // Відмальовуємо знайдені зображення\n\n    totalPages = Math.ceil(totalImages / perPage); // Оновлюємо загальну кількість сторінок\n\n    smoothScroll(); // Скрол після рендеру\n    //console.log('Поточна група елементів:', page);\n    // console.log('Всього зображень:', totalImages);\n\n    if (page === totalPages) {\n      refs.btnLoadMore.style.display = 'none'; // Якщо досягли останньої сторінки - ховаємо кнопку\n      iziToast.info({\n        title: 'Увага',\n        message: `🔹 Ви досягли кінця результатів пошуку.`,\n        position: 'topCenter',\n        timeout: 5000,\n      });\n    } else {\n      refs.btnLoadMore.style.display = 'block';\n    }\n  } catch (error) {\n    iziToast.error({\n      title: 'Помилка',\n      message: `❌ Щось зламалося. Треба звернутись до адміністратора сайту! Або спробуйте ще раз пізніше!`,\n      position: 'topCenter',\n      timeout: 5000,\n    });\n  } finally {\n    refs.txtLoaderMore.style.display = 'none';\n  }\n}\n\n//\n\nfunction onMovieClick(evt) {\n  const movieItem = evt.target.closest('.last-movie-item'); // Шукаємо найближчий li\n  if (!movieItem) return; // Виходимо, якщо клік був не по li\n\n  const movieId = movieItem.id; // Отримуємо id\n  console.log('Вибраний фільм з id:', movieId);\n\n  // Викликаємо потрібну функцію\n  fetchMovieDetails(movieId);\n  smoothScroll();\n}\n\nfunction smoothScroll() {\n  setTimeout(() => {\n    if (!refs.boxAboutMovie) return;\n\n    const lastMovieItem = document.querySelector('.last-movie-list li'); // Всі елементи галереї\n    if (!lastMovieItem) {\n      console.log('Галерея порожня або ще не завантажилася');\n      return;\n    }\n    console.log('Елемент', lastMovieItem);\n    const cardHeight = lastMovieItem.getBoundingClientRect().height; // Висота першого елемента\n    console.log('Висота', cardHeight);\n    window.scrollBy({ top: -cardHeight * 2, behavior: 'smooth' }); // Прокручуємо\n  }, 500); // Чекаємо 500 мс, щоб DOM оновився\n}\n"],"names":["refs","renderQueryList","queryMovies","markup","movie","genres","renderMovieList","movies","renderMovieAbout","showMovie","actors","actorList","actor","actorImages","SimpleLightbox","renderCategoryMovie","categoryMovies","renderTopMovie","topMovies","querySearchMovies","query","limit","page","BASE_URL","END_POINT","params","url","headers","resQuery","axios","totalMovies","error","showLastMovies","fetchMovieDetails","movieId","showCategoryMovies","showTopMovies","onMovieClick","onFormSubmit","evt","totalPages","iziToast","movieItem","smoothScroll","lastMovieItem","cardHeight"],"mappings":"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"}